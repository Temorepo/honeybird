<?xml version="1.0"?>
<project name="honeybird" default="compile" basedir=".">
  <!-- project metadata -->
  <property name="lib.name"         value="honeybird"/>
  <property name="doc.packages"     value="com.threerings.honeybird.*"/>
  <property name="doc.overview"     value="com/threerings/honeybird/overview.html"/>
  <property name="copyright.holder" value="Three Rings Design, Inc."/>

  <!-- various directories used when building things -->
  <property name="src.dir"     value="src/java"/>
  <property name="deploy.dir"  value="dist"/>
  <property name="classes.dir" value="${deploy.dir}/classes"/>
  <property name="javadoc.dir" value="${deploy.dir}/docs"/>
  <property name="libs.dir"    value="lib"/>

  <!-- declare our classpath -->
  <path id="classpath">
    <pathelement location="${classes.dir}"/>
    <fileset dir="${deploy.dir}/lib" includes="*.jar"/>
  </path>

  <!-- our dependencies are in a separate file so that we can integrate into OOO builds -->
  <import file="etc/libs-incl.xml"/>

  <!-- prepares the application directories -->
  <target name="prepare">
    <tstamp><format property="year" pattern="yyyy" /></tstamp>
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/lib"/>
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${javadoc.dir}"/>
    <copy todir="${deploy.dir}/lib" flatten="true">
      <fileset refid="${lib.name}.libs"/>
    </copy>
  </target>

  <!-- determines which optional packages should be built -->
  <target name="compute-builds">
    <!-- check to see which packages are available -->
    <available property="junit.present" classpathref="classpath" classname="junit.framework.Test"/>
    <echo level="info">JUnit: ${junit.present}</echo>

    <!-- combines package availability into build controls -->
    <condition property="build.tests">
      <and><isset property="junit.present"/></and>
    </condition>
  </target>

  <!-- cleans out the intermediate build files -->
  <target name="clean" description="Cleans out build results.">
    <delete dir="${classes.dir}"/>
    <delete dir="${deploy.dir}/docs"/>
    <delete failonerror="false"><fileset dir="${deploy.dir}" includes="*.jar"/></delete>
  </target>

  <!-- wipes the entire build directory clean -->
  <target name="distclean" description="Completely removes build result directory.">
    <delete dir="${deploy.dir}"/>
  </target>

  <!-- build the java class files -->
  <target name="compile" depends="prepare,compute-builds" description="Compiles the code.">
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" source="1.5" target="1.5" encoding="utf-8">
      <classpath refid="classpath"/>
      <exclude name="com/samskivert/depot/tests/**" unless="build.tests"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
  </target>

  <!-- build the javadoc documentation -->
  <target name="javadoc" depends="prepare,compute-builds"
          description="Generates javadoc documentation.">
    <javadoc windowtitle="${lib.name} API" doctitle="${lib.name} API"
             overview="${src.dir}/${doc.overview}" destdir="${javadoc.dir}"
             additionalparam="-breakiterator"
             link="http://samskivert.com/code/samskivert/samskivert/docs/api/">
      <packageset dir="${src.dir}"/>
      <bottom>Copyright &#169; 2009 ${copyright.holder}. All Rights Reserved.</bottom>
      <classpath refid="classpath"/>
      <link href="http://java.sun.com/j2se/1.5/docs/api/"/>
    </javadoc>
  </target>

  <!-- a target for rebuilding everything -->
  <target name="all" depends="clean,prepare,compile,javadoc,dist"
          description="Cleans and rebuilds everything including documentation."/>

  <!-- builds our distribution jar file -->
  <target name="dist" depends="prepare,compile"
      description="Compiles the code and builds our jar file.">
      <jar destfile="${deploy.dir}/${lib.name}.jar" basedir="${classes.dir}"/>
  </target>
</project>
