<?xml version="1.0"?>
<project name="honeybird" default="compile" basedir=".">
  <!-- project metadata -->
  <property name="lib.name"         value="honeybird"/>
  <property name="doc.packages"     value="com.threerings.honeybird.*"/>
  <property name="copyright.holder" value="Three Rings Design, Inc."/>

  <!-- various directories used when building things -->
  <property name="src.dir"     value="src/java"/>
  <property name="example.dir"     value="example/java"/>
  <property name="test.dir"     value="test/java"/>
  <property name="deploy.dir"  value="dist"/>
  <property name="src.classes.dir" value="${deploy.dir}/src-classes"/>
  <property name="example.classes.dir" value="${deploy.dir}/example-classes"/>
  <property name="test.classes.dir" value="${deploy.dir}/test-classes"/>
  <property name="javadoc.dir" value="${deploy.dir}/docs"/>
  <property name="libs.dir"    value="lib"/>

  <!-- declare our classpath -->
  <path id="classpath">
    <pathelement location="${src.classes.dir}"/>
    <pathelement location="${example.classes.dir}"/>
    <pathelement location="${test.classes.dir}"/>
    <fileset dir="${deploy.dir}/lib" includes="*.jar"/>
  </path>

  <!-- our dependencies are in a separate file so that we can integrate into OOO builds -->
  <import file="etc/libs-incl.xml"/>

  <!-- prepares the application directories -->
  <target name="prepare">
    <tstamp><format property="year" pattern="yyyy" /></tstamp>
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/lib"/>
    <mkdir dir="${src.classes.dir}"/>
    <mkdir dir="${test.classes.dir}"/>
    <mkdir dir="${example.classes.dir}"/>
    <mkdir dir="${javadoc.dir}"/>
    <copy todir="${deploy.dir}/lib" flatten="true">
      <fileset refid="${lib.name}.libs"/>
    </copy>
    <copy todir="${test.classes.dir}">
        <fileset dir="${test.dir}" includes="**/*xml"/>
    </copy>
  </target>

  <!-- cleans out the intermediate build files -->
  <target name="clean" description="Cleans out build results.">
    <delete dir="${src.classes.dir}"/>
    <delete dir="${example.classes.dir}"/>
    <delete dir="${test.classes.dir}"/>
    <delete dir="${deploy.dir}/docs"/>
    <delete failonerror="false"><fileset dir="${deploy.dir}" includes="*.jar"/></delete>
  </target>

  <!-- wipes the entire build directory clean -->
  <target name="distclean" description="Completely removes build result directory.">
    <delete dir="${deploy.dir}"/>
  </target>

  <!-- build the java class files -->
  <macrodef name="compilejava">
      <attribute name="srcdir"/>
      <attribute name="destdir"/>
      <sequential>
          <javac srcdir="@{srcdir}" destdir="@{destdir}" includeAntRuntime="false"
              debug="on" optimize="${build.optimize}" source="1.5" target="1.5" encoding="utf-8">
              <classpath refid="classpath"/>
              <compilerarg value="-Xlint"/>
              <compilerarg value="-Xlint:-serial"/>
          </javac>
      </sequential>
  </macrodef>
  <target name="compile" depends="prepare" description="Compiles the code.">
      <compilejava srcdir="${src.dir}" destdir="${src.classes.dir}"/>
      <compilejava srcdir="${example.dir}" destdir="${example.classes.dir}"/>
      <compilejava srcdir="${test.dir}" destdir="${test.classes.dir}"/>
  </target>

  <!-- build the javadoc documentation -->
  <target name="javadoc" depends="prepare" description="Generates javadoc documentation.">
    <javadoc windowtitle="${lib.name} API" doctitle="${lib.name} API"
             destdir="${javadoc.dir}" additionalparam="-breakiterator">
      <packageset dir="${src.dir}"/>
      <bottom>Copyright &#169; 2009 ${copyright.holder}. All Rights Reserved.</bottom>
      <classpath refid="classpath"/>
      <link href="http://java.sun.com/j2se/1.5/docs/api/"/>
      <link href="http://code.google.com/apis/gdata/javadoc/"/>
    </javadoc>
  </target>

  <!-- a target for rebuilding everything -->
  <target name="all" depends="clean,javadoc,test,dist"
      description="Cleans and rebuilds everything including documentation."/>

  <target name="test" depends="compile">
      <junit haltonfailure="yes">
          <classpath refid="classpath"/>
          <formatter type="plain" usefile="false"/>
          <batchtest>
              <fileset dir="${test.dir}">
                  <include name="**/*Test*.java"/>
              </fileset>
          </batchtest>
      </junit>
  </target>

  <!-- builds our distribution jar file -->
  <target name="dist" depends="compile" description="Compiles the code and builds our jar file.">
      <jar destfile="${deploy.dir}/${lib.name}.jar" basedir="${src.classes.dir}"/>
  </target>

  <target name="example" depends="prepare,compile" description="Runs the example code">
      <copy file="etc/honeybird.properties" todir="${example.classes.dir}"/>
      <java classname="example.HoneybirdExample" classpathref="classpath" fork="true"/>
  </target>

  <!-- builds a release zip file -->
  <target name="release" depends="javadoc,dist" description="Generates a zip containing the jar, docs, and license.">
      <property name="release.name" value="${lib.name}-${version}"/>
      <property name="release.dir" value="${deploy.dir}/${release.name}"/>
      <mkdir dir="${release.dir}"/>
      <copy todir="${release.dir}">
          <fileset dir="${deploy.dir}" includes="docs/**/*"/>
          <fileset dir="." includes="LICENSE,RELEASE_NOTES"/>
      </copy>
      <copy todir="${release.dir}/src">
          <fileset dir="${src.dir}" includes="**/*"/>
      </copy>
      <copy file="${deploy.dir}/${lib.name}.jar" tofile="${release.dir}/${release.name}.jar"/>
      <copy file="etc/RELEASE_README" tofile="${release.dir}/README"/>
      <zip destfile="${deploy.dir}/${release.name}.zip" basedir="${deploy.dir}" includes="${release.name}/**"/>
  </target>
</project>
